import os
import sys
import configparser
import time
from pyrogram import Client, filters
from pyrogram.types import Message

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "config.ini"
COMMANDS_DIR = "cub_cmd"

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Termux
if 'com.termux' in os.environ.get('PREFIX', ''):
    os.system('clear')
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cosmo User Bot –≤ Termux üåå\n")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
config = configparser.ConfigParser()
if not os.path.exists(CONFIG_FILE):
    print("ü™ê –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram API:\n")
    config['pyrogram'] = {
        'api_id': input("API ID: "),
        'api_hash': input("API Hash: ")
    }
    with open(CONFIG_FILE, 'w') as f:
        config.write(f)
    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    os.execl(sys.executable, sys.executable, *sys.argv)

config.read(CONFIG_FILE)
api_id = config.getint('pyrogram', 'api_id')
api_hash = config.get('pyrogram', 'api_hash')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
commands = {}
for filename in os.listdir(COMMANDS_DIR):
    if filename.endswith('.py') and not filename.startswith('__'):
        module_name = filename[:-3]
        try:
            module = __import__(f"{COMMANDS_DIR}.{module_name}", fromlist=['command'])
            if hasattr(module, 'command'):
                cmd = module.command
                commands[cmd['name']] = cmd
                for alias in cmd.get('aliases', []):
                    commands[alias] = cmd
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

# –ö–ª–∏–µ–Ω—Ç Pyrogram
app = Client(
    "cub_session",
    api_id=api_id,
    api_hash=api_hash,
    device_model="Cosmo User Bot",
    app_version="CUB 1.0",
    system_version="CosmoOS"
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.text & (filters.private | filters.group))
async def handle_commands(client: Client, message: Message):
    start_time = time.time()
    prefixes = ['.', '!', '/', '*']  # –£–±—Ä–∞–ª –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ !
    text = message.text
    
    # –ü–æ–∏—Å–∫ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    prefix = None
    for p in prefixes:
        if text.startswith(p):
            prefix = p
            break
    
    if not prefix:
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    cmd_text = text[len(prefix):].strip()
    cmd_name = cmd_text.split()[0].lower() if cmd_text else ''
    
    # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
    if cmd_name in commands:
        command = commands[cmd_name]
        try:
            await command['handler'](client, message, start_time)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
if __name__ == "__main__":
    print("""
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   
""")
    print("üåå –ó–∞–ø—É—Å–∫ Cosmo User Bota (CUB) ...")
    app.start()
    print("\n‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏—à–∏ –≤ termux : Ctrl+C\n")
    
    try:
        from threading import Event
        Event().wait()
    except KeyboardInterrupt:
        print("\nüå† –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cosmo User Bota (CUB) ...")
        app.stop()
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
